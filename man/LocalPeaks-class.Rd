% Note: This man page is written manually, not generated by roxygen

\docType{class}
\name{LocalPeaks-class}
\alias{LocalPeaks-class}
\alias{LocalPeaks}
\alias{region}
\alias{samples}
\alias{peaks}
\alias{\S4method{region}{LocalPeaks}}
\alias{\S4method{samples}{LocalPeaks}}
\alias{\S4method{peaks}{LocalPeaks}}

\title{LocalPeaks}

\usage{
\S4method{region}{LocalPeaks}(x)
\S4method{samples}{LocalPeaks}(object)
\S4method{peaks}{LocalPeaks}(x)
}

\arguments{
\item{x}{LocalPeaks object, as returned by \code{\link{retrievePeaks}}}

\item{object}{LocalPeaks object, as returned by \code{\link{retrievePeaks}}}
}
\value{
LocalPeaks object
}

\description{
The LocalPeaks class is a container for the peaks for one or more
marks for a set of samples in a specific genomic region of interest, as well
as the genomic region itself, and the sample IDs. These components are needed to
convert sets of peaks into rectangular feature-by-sample matrices which we
can then use for downstream analysis - and in particular, as input to a
clustering algorithm in order to call a chromatin state switch.
}

\section{Slots}{

\describe{
\item{\code{region}}{A GRanges object specifying one genomic region,
the query region}

\item{\code{peaks}}{List of lists of GRanges objects. Each outer list stores peaks
for each sample for one mark in \code{region}.}

\item{\code{samples}}{Character vector with sample identifiers.}
}}

\section{Methods}{

\describe{

\item{\code{\link[=region-method]{region}}:}{Access region
slot of \code{LocalPeaks} object.}
\item{\code{\link[=samples-method]{samples}}:}{Access samples
slot of \code{LocalPeaks} object.}
\item{\code{\link[=peaks-method]{peaks}}:}{Access peaks
slot of \code{LocalPeaks} object.}

}}

\examples{

# Assemble dataset
samples <- c("E068", "E071", "E074", "E101", "E102", "E110")
bedfiles <- system.file("extdata", paste0(samples, ".H3K4me3.bed"),
package = "chromswitch")

metadata <- data.frame(Sample = samples,
    H3K4me3 = bedfiles,
    stringsAsFactors = FALSE)

# Obtain a LocalPeaks object by retrieving the peaks in the query region
lpk <- retrievePeaks(H3K4me3,
    metadata = metadata,
    region = GRanges(seqnames = "chr19",
    ranges = IRanges(start = 54924104, end = 54929104)))

# lpk now stores the query region, samples, and associated peaks overlapping
# the query region

# Get the samples from the object
samples(lpk)

# Get the query region associated with the object
region(lpk)

# Get the set of peaks in each sample which overlap with the query region
peaks(lpk)


}
